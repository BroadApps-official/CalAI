//
//  TaskViewModel.swift
//  CalAI
//
//  Created by –î–µ–Ω–∏—Å –ù–∏–∫–æ–ª–∞–µ–≤ on 14.03.2025.
//

import SwiftUI

class TaskViewModel: ObservableObject {
    @Published var task: TaskResponse?
    @Published var errorMessage: String?
    @Published var isLoading: Bool = false
    @Published var newTaskText: String = ""
    @Published var navigationDestination: NavigationDestination?
    @Published var isDataLoaded: Bool = false
    @Published var selectedImage: UIImage?
    var taskId: UUID?
    private let apiClient = APIClient()

    func createUserTask(destination: NavigationDestination) {
        guard !newTaskText.isEmpty else {
            errorMessage = "–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            return
        }

        isLoading = true
        isDataLoaded = false
        navigationDestination = nil
        apiClient.createUserTask(text: newTaskText) { result in
            DispatchQueue.main.async {
                switch result {
                case .success(let taskResponse):
                    self.task = taskResponse
                    self.taskId = taskResponse.id
                    print("üì• –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: \(taskResponse)")
                    DispatchQueue.main.asyncAfter(deadline: .now() + 10.0) {
                        self.fetchTaskWithRetries(taskId: taskResponse.id, destination: destination, retries: 5)
                    }
                case .failure(let error):
                    self.isLoading = false
                    self.errorMessage = "–û—à–∏–±–∫–∞: \(error.localizedDescription)"
                }
            }
        }
    }

    func createImageTask(image: UIImage, destination: NavigationDestination) {
        isLoading = true
        isDataLoaded = false
        navigationDestination = nil
        selectedImage = image
        apiClient.createImageTask(image: image) { result in
            DispatchQueue.main.async {
                switch result {
                case .success(let taskResponse):
                    self.task = taskResponse
                    self.taskId = taskResponse.id
                    print("üì• –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: \(taskResponse)")
                    if let taskId = self.taskId {
                        DispatchQueue.main.asyncAfter(deadline: .now() + 10.0) {
                            self.fetchImageTaskWithRetries(taskId: taskId, destination: destination, retries: 5)
                        }
                    }
                case .failure(let error):
                    self.isLoading = false
                    self.errorMessage = "–û—à–∏–±–∫–∞: \(error.localizedDescription)"
                }
            }
        }
    }

    private func fetchTaskWithRetries(taskId: UUID, destination: NavigationDestination, retries: Int, delay: Double = 5.0) {
        apiClient.getTask(taskId: taskId) { result in
            DispatchQueue.main.async {
                switch result {
                case .success(let taskResponse):
                    self.task = taskResponse
                    print("üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ items: \(taskResponse.items ?? [])")
                    if (taskResponse.items?.isEmpty ?? true) && retries > 0 {
                        print("Items –ø—É—Å—Ç–æ–π, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ \(delay) —Å–µ–∫, –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: \(retries)")
                        DispatchQueue.main.asyncAfter(deadline: .now() + delay) {
                            self.fetchTaskWithRetries(taskId: taskId, destination: destination, retries: retries - 1)
                        }
                    } else {
                        self.isDataLoaded = true
                        self.navigationDestination = destination
                    }
                case .failure(let error):
                    self.isLoading = false
                    self.errorMessage = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: \(error.localizedDescription)"
                }
            }
        }
    }

    private func fetchImageTaskWithRetries(taskId: UUID, destination: NavigationDestination, retries: Int, delay: Double = 5.0) {
        apiClient.getImageTask(taskId: taskId) { result in
            DispatchQueue.main.async {
                switch result {
                case .success(let taskResponse):
                    self.task = taskResponse
                    print("üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ items: \(taskResponse.items ?? [])")
                    if (taskResponse.items?.isEmpty ?? true) && retries > 0 {
                        print("Items –ø—É—Å—Ç–æ–π, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ \(delay) —Å–µ–∫, –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: \(retries)")
                        DispatchQueue.main.asyncAfter(deadline: .now() + delay) {
                            self.fetchImageTaskWithRetries(taskId: taskId, destination: destination, retries: retries - 1)
                        }
                    } else {
                        self.isDataLoaded = true
                        self.navigationDestination = destination
                    }
                case .failure(let error):
                    self.isLoading = false
                    self.errorMessage = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: \(error.localizedDescription)"
                }
            }
        }
    }
}

